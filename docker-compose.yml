version: '3.9'
services:
  app:
    container_name: go-api
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      TEST_POSTGRES_USER: ${TEST_POSTGRES_USER}
      TEST_POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      TEST_POSTGRES_DB: ${TEST_POSTGRES_DB}
      TEST_DATABASE_HOST: ${TEST_DATABASE_HOST}
      TEST_DATABASE_PORT: ${TEST_DATABASE_PORT}
    tty: true
    build: .
    ports:
      - 8000:8080
    volumes:
      - app-api:/app
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - postgres_network

  postgresdb:
    container_name: postgres_container
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_HOST: ${DB_HOST}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgres-db:/var/lib/postgresql/data
    networks:
      - postgres_network

  postgresdb_test:
    container_name: postgres_test_container
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      DATABASE_HOST: postgresdb
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - '5433:5432'
    volumes:
      - postgres-db-test:/var/lib/postgresql/data
    networks:
      - postgres_network

  pgadmin-golang-container:
    container_name: pgadmin-golang-container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: "False"
    ports:
      - "8888:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - postgres_network

# Networks to be created to facilitate communication between containers
networks:
  postgres_network:

volumes:
  app-api:
  postgres-db:
  postgres-db-test:
  pgadmin-data: