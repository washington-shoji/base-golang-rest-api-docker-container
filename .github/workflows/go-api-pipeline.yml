name: Go API CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  mock-tests:
    name: Run Mock/Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.22.3

    - name: Set up dependencies
      run: go mod download

    - name: Run mock tests
      run: go test ./unit* -v -run Test.*Mock

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [mock-tests]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set environment variables
      run: |
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> $GITHUB_ENV
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> $GITHUB_ENV
        echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> $GITHUB_ENV
        echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> $GITHUB_ENV
        echo TEST_POSTGRES_USER=${{ secrets.TEST_POSTGRES_USER }} >> $GITHUB_ENV
        echo TEST_POSTGRES_PASSWORD=${{ secrets.TEST_POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo TEST_POSTGRES_DB=${{ secrets.TEST_POSTGRES_DB }} >> $GITHUB_ENV
        echo TEST_DATABASE_HOST=${{ secrets.TEST_DATABASE_HOST }} >> $GITHUB_ENV
        echo TEST_DATABASE_PORT=${{ secrets.TEST_DATABASE_PORT }} >> $GITHUB_ENV
        echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> $GITHUB_ENV
        echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> $GITHUB_ENV

    - name: Build Docker image
      run: docker-compose build

    - name: Start Docker Compose in detached mode
      run: docker-compose up -d

    - name: Wait for Postgres to be healthy
      run: |
        echo "Waiting for Postgres to be healthy..."
        until docker-compose exec postgresdb pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; do
          echo "$(date) - Waiting for Postgres..."
          docker-compose logs postgresdb
          sleep 5
        done
        echo "Postgres is ready!"

    - name: Lint the Dockerfile
      run: docker run --rm -i hadolint/hadolint < Dockerfile

    - name: Tear down Docker Compose
      run: docker-compose down