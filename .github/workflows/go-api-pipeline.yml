name: Go API CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  mock-tests:
    name: Run Mock/Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.22.3

    - name: Set environment variables
      run: |
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> $GITHUB_ENV
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> $GITHUB_ENV
        echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> $GITHUB_ENV
        echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> $GITHUB_ENV
        # echo TEST_POSTGRES_USER=${{ secrets.TEST_POSTGRES_USER }} >> $GITHUB_ENV
        # echo TEST_POSTGRES_PASSWORD=${{ secrets.TEST_POSTGRES_PASSWORD }} >> $GITHUB_ENV
        # echo TEST_POSTGRES_DB=${{ secrets.TEST_POSTGRES_DB }} >> $GITHUB_ENV
        # echo TEST_DATABASE_HOST=${{ secrets.TEST_DATABASE_HOST }} >> $GITHUB_ENV
        # echo TEST_DATABASE_PORT=${{ secrets.TEST_DATABASE_PORT }} >> $GITHUB_ENV
        # echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> $GITHUB_ENV
        # echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> $GITHUB_ENV

    - name: Set up dependencies
      run: go mod download

    - name: Run mock tests
      run: go test ./unit* -v -run Test.*Mock

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: mock-tests

    services:
      postgresdb_test:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          PGDATA: /var/lib/postgresql/data/pgdata
        options: >-
          --network-alias postgresdb
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.22.3

    - name: Set environment variables
      run: |
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "POSTGRES_DB=postgres" >> $GITHUB_ENV
        echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
        echo "DATABASE_PORT=5432" >> $GITHUB_ENV

    - name: Wait for Postgres to be healthy
      run: |
        echo "Waiting for PostgreSQL to become responsive..."
        until psql -U "postgres" -h "localhost" -p 5432 -c '\q'; do
          echo "Postgres is unavailable - sleeping"
          sleep 1
        done
        echo "Postgres is up and running"

    - name: Set up dependencies
      run: go mod download

    - name: Verify PostgreSQL Connection
      run: psql -U postgres -h localhost -c "SELECT 1"
    
    - name: Set db user role
      run: |
        psql -U postgres -c "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN ENCRYPTED PASSWORD postgres"
        
    - name: Run integration tests
      run: go test -v ./integration*

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [mock-tests, integration-tests]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set environment variables
      run: |
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> $GITHUB_ENV
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> $GITHUB_ENV
        echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> $GITHUB_ENV
        echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> $GITHUB_ENV
        echo TEST_POSTGRES_USER=${{ secrets.TEST_POSTGRES_USER }} >> $GITHUB_ENV
        echo TEST_POSTGRES_PASSWORD=${{ secrets.TEST_POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo TEST_POSTGRES_DB=${{ secrets.TEST_POSTGRES_DB }} >> $GITHUB_ENV
        echo TEST_DATABASE_HOST=${{ secrets.TEST_DATABASE_HOST }} >> $GITHUB_ENV
        echo TEST_DATABASE_PORT=${{ secrets.TEST_DATABASE_PORT }} >> $GITHUB_ENV
        echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> $GITHUB_ENV
        echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> $GITHUB_ENV

    - name: Build Docker image
      run: docker-compose build

    - name: Start Docker Compose in detached mode
      run: docker-compose up -d

    - name: Wait for Postgres to be healthy
      run: |
        echo "Waiting for Postgres to be healthy..."
        while ! docker-compose exec -T postgresdb pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; do
          echo "Waiting for Postgres..."
          sleep 5
        done
        echo "Postgres is ready!"

    - name: Lint the Dockerfile
      run: docker run --rm -i hadolint/hadolint < Dockerfile

    - name: Tear down Docker Compose
      run: docker-compose down -v
