name: Go API CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: mock-tests

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.22.3

    - name: Set environment variables
      run: |
        echo TEST_POSTGRES_USER=${{ secrets.TEST_POSTGRES_USER }} >> $GITHUB_ENV
        echo TEST_POSTGRES_PASSWORD=${{ secrets.TEST_POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo TEST_POSTGRES_DB=${{ secrets.TEST_POSTGRES_DB }} >> $GITHUB_ENV
        echo TEST_DATABASE_HOST=localhost >> $GITHUB_ENV
        echo TEST_DATABASE_PORT=5432 >> $GITHUB_ENV

    - name: Wait for Postgres to be healthy
      run: |
        echo "Waiting for Test Postgres to be healthy..."
        until docker exec -T $(docker ps -q -f name=postgres) pg_isready -U $TEST_POSTGRES_USER -d $TEST_POSTGRES_DB; do
          echo "Waiting for Test Postgres..."
          sleep 5
        done
        echo "Test Postgres is ready!"

    - name: Set up dependencies
      run: go mod download

    - name: Run integration tests
      run: go test -v ./services/todo_service_integration_test.go

  mock-tests:
    name: Run Mock Tests
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.22.3

    - name: Set up dependencies
      run: go mod download

    - name: Run mock tests
      run: go test ./... -v -run Test.*Mock

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [integration-tests, mock-tests]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set environment variables
      run: |
        echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> $GITHUB_ENV
        echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> $GITHUB_ENV
        echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> $GITHUB_ENV
        echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> $GITHUB_ENV
        echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> $GITHUB_ENV

    - name: Build Docker image
      run: docker-compose build

    - name: Start Docker Compose in detached mode
      run: docker-compose up -d

    - name: Wait for Postgres to be healthy
      run: |
        echo "Waiting for Postgres to be healthy..."
        until docker-compose exec -T postgresdb pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; do
          echo "Waiting for Postgres..."
          sleep 5
        done
        echo "Postgres is ready!"

    - name: Run tests in Docker Compose
      run: docker-compose run --no-TTY app go test ./... -v

    - name: Lint the Dockerfile
      run: docker run --rm -i hadolint/hadolint < Dockerfile

    - name: Tear down Docker Compose
      run: docker-compose down
